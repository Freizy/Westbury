const mysql=require('mysql2/promise');require('dotenv').config();const dbConfig={host:process.env.DB_HOST || 'localhost',user:process.env.DB_USER || 'root',password:process.env.DB_PASSWORD || '',database:process.env.DB_NAME || 'luxury_apartments_accra',port:process.env.DB_PORT || 3306,charset:'utf8mb4',timezone:'+00:00'};let pool;const initializeDatabase=async ()=>{try{const tempConnection=await mysql.createConnection({host:dbConfig.host,user:dbConfig.user,password:dbConfig.password,port:dbConfig.port});await tempConnection.query(`CREATE DATABASE IF NOT EXISTS ${dbConfig.database}CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`);await tempConnection.end();pool=mysql.createPool(dbConfig);const connection=await pool.getConnection();console.log('✅ MySQL database connected successfully');connection.release();await createTables();return true}catch (error){console.error('❌ Database connection failed:',error);throw error}};const createTables=async ()=>{try{await pool.query(` CREATE TABLE IF NOT EXISTS users ( id INT AUTO_INCREMENT PRIMARY KEY,username VARCHAR(50) UNIQUE NOT NULL,email VARCHAR(100) UNIQUE NOT NULL,password_hash VARCHAR(255) NOT NULL,role ENUM('admin','superadmin') DEFAULT 'admin',created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci `);await pool.query(` CREATE TABLE IF NOT EXISTS properties ( id INT AUTO_INCREMENT PRIMARY KEY,title VARCHAR(255) NOT NULL,description TEXT,location VARCHAR(255) NOT NULL,address TEXT,price DECIMAL(10,2) NOT NULL,bedrooms INT DEFAULT 1,bathrooms INT DEFAULT 1,size_sqft INT,amenities JSON,images JSON,featured BOOLEAN DEFAULT FALSE,available BOOLEAN DEFAULT TRUE,created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci `);await pool.query(` CREATE TABLE IF NOT EXISTS bookings ( id INT AUTO_INCREMENT PRIMARY KEY,property_id INT NOT NULL,guest_name VARCHAR(100) NOT NULL,guest_email VARCHAR(100) NOT NULL,guest_phone VARCHAR(20),check_in_date DATE NOT NULL,check_out_date DATE NOT NULL,guests_count INT DEFAULT 1,total_amount DECIMAL(10,2) NOT NULL,special_requests TEXT,status ENUM('pending','confirmed','cancelled','completed') DEFAULT 'pending',created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,FOREIGN KEY (property_id) REFERENCES properties(id) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci `);await pool.query(` CREATE TABLE IF NOT EXISTS contact_inquiries ( id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(100) NOT NULL,email VARCHAR(100) NOT NULL,phone VARCHAR(20),message TEXT NOT NULL,property_id INT,status ENUM('pending','contacted','resolved','spam') DEFAULT 'pending',created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,FOREIGN KEY (property_id) REFERENCES properties(id) ON DELETE SET NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci `);await pool.query(` CREATE TABLE IF NOT EXISTS staff ( id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(100) NOT NULL,position VARCHAR(100) NOT NULL,email VARCHAR(100) UNIQUE NOT NULL,phone VARCHAR(20),status ENUM('active','inactive') DEFAULT 'active',created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci `);await pool.query(` CREATE TABLE IF NOT EXISTS attendance ( id INT AUTO_INCREMENT PRIMARY KEY,staff_id INT NOT NULL,date DATE NOT NULL,time_in TIME,time_out TIME,status ENUM('active','completed') DEFAULT 'active',created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci `);await pool.query(` CREATE TABLE IF NOT EXISTS inventory ( id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(100) NOT NULL,category VARCHAR(50) NOT NULL,quantity INT NOT NULL DEFAULT 0,min_quantity INT NOT NULL DEFAULT 0,unit VARCHAR(20) NOT NULL,last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci `);console.log('✅ Database tables created successfully')}catch (error){console.error('❌ Error creating tables:',error);throw error}};const query=async (sql,params=[])=>{try{const [rows]=await pool.query(sql,params);return rows}catch (error){console.error('Query error:',error);throw error}};const run=async (sql,params=[])=>{try{const [result]=await pool.query(sql,params);return{id:result.insertId,changes:result.affectedRows,lastID:result.insertId}}catch (error){console.error('Run error:',error);throw error}};const closeDatabase=async ()=>{if (pool){await pool.end();console.log('Database connection closed')}};module.exports={initializeDatabase,query,run,closeDatabase};
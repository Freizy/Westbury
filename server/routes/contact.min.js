const express=require('express');const router=express.Router();const{run,query}=require('../database/database');const nodemailer=require('nodemailer');router.post('/',async (req,res)=>{try{const{name,email,phone,message,property_id}=req.body;if (!name ||!email ||!message){return res.status(400).json({success:false,error:'Name,email,and message are required'})}const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;if (!emailRegex.test(email)){return res.status(400).json({success:false,error:'Please provide a valid email address'})}const result=await run( 'INSERT INTO contact_inquiries (name,email,phone,message,property_id) VALUES (?,?,?,?,?)',[name,email,phone || null,message,property_id || null] );if (process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS){try{const transporter=nodemailer.createTransporter({host:process.env.SMTP_HOST,port:process.env.SMTP_PORT || 587,secure:false,auth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS}});const mailOptions={from:process.env.SMTP_USER,to:process.env.ADMIN_EMAIL || 'admin@luxuryapartmentsaccra.com',subject:'New Contact Inquiry-Luxury Apartments Accra',html:`<h2>New Contact Inquiry</h2><p><strong>Name:</strong>${name}</p><p><strong>Email:</strong>${email}</p><p><strong>Phone:</strong>${phone || 'Not provided'}</p><p><strong>Message:</strong></p><p>${message}</p>${property_id ? `<p><strong>Property ID:</strong>${property_id}</p>`:''}<p><strong>Date:</strong>${new Date().toLocaleString()}</p>`};await transporter.sendMail(mailOptions)}catch (emailError){console.error('Email sending failed:',emailError)}}res.status(201).json({success:true,message:'Contact inquiry submitted successfully',data:{id:result.id,name,email,phone,message,property_id}})}catch (error){console.error('Error creating contact inquiry:',error);res.status(500).json({success:false,error:'Failed to submit contact inquiry'})}});router.get('/',async (req,res)=>{try{const inquiries=await query( 'SELECT ci.*,p.title as property_title FROM contact_inquiries ci LEFT JOIN properties p ON ci.property_id=p.id ORDER BY ci.created_at DESC' );res.json({success:true,data:inquiries,count:inquiries.length})}catch (error){console.error('Error fetching contact inquiries:',error);res.status(500).json({success:false,error:'Failed to fetch contact inquiries'})}});router.patch('/:id',async (req,res)=>{try{const{id}=req.params;const{status}=req.body;if (!status ||!['pending','contacted','resolved','spam'].includes(status)){return res.status(400).json({success:false,error:'Valid status is required (pending,contacted,resolved,spam)'})}const result=await run( 'UPDATE contact_inquiries SET status=? WHERE id=?',[status,id] );if (result.changes===0){return res.status(404).json({success:false,error:'Contact inquiry not found'})}res.json({success:true,message:'Contact inquiry status updated successfully'})}catch (error){console.error('Error updating contact inquiry:',error);res.status(500).json({success:false,error:'Failed to update contact inquiry'})}});router.get('/:id',async (req,res)=>{try{const{id}=req.params;const inquiries=await query( 'SELECT ci.*,p.title as property_title FROM contact_inquiries ci LEFT JOIN properties p ON ci.property_id=p.id WHERE ci.id=?',[id] );if (inquiries.length===0){return res.status(404).json({success:false,error:'Contact inquiry not found'})}res.json({success:true,data:inquiries[0]})}catch (error){console.error('Error fetching contact inquiry:',error);res.status(500).json({success:false,error:'Failed to fetch contact inquiry'})}});router.get('/stats/overview',async (req,res)=>{try{const stats=await query(` SELECT COUNT(*) as total,SUM(CASE WHEN status='pending' THEN 1 ELSE 0 END) as pending,SUM(CASE WHEN status='contacted' THEN 1 ELSE 0 END) as contacted,SUM(CASE WHEN status='resolved' THEN 1 ELSE 0 END) as resolved,SUM(CASE WHEN status='spam' THEN 1 ELSE 0 END) as spam FROM contact_inquiries `);res.json({success:true,data:stats[0]})}catch (error){console.error('Error fetching contact statistics:',error);res.status(500).json({success:false,error:'Failed to fetch contact statistics'})}});module.exports=router;